Here is a link to the AngularJS documentation
	https://angular.io/docs

Angular security recommendations
	https://angular.io/guide/security

Best practices 

	Keep current with the latest Angular library releases. We regularly update the Angular libraries, and these updates may fix security defects discovered in previous versions. Check the Angular change log for security-related updates.

	Don't modify your copy of Angular. Private, customized versions of Angular tend to fall behind the current version and may not include important security fixes and enhancements. Instead, share your Angular improvements with the community and make a pull request.

	Avoid Angular APIs marked in the documentation as “Security Risk.” For more information, see the Trusting safe values section of this page.

Preventing cross-site scripting (XSS) 

	Cross-site scripting (XSS) enables attackers to inject malicious code into web pages. Such code can then, for example, steal user data (in particular, login data) or perform actions to impersonate the user. This is one of the most common attacks on the web.

	To block XSS attacks, you must prevent malicious code from entering the DOM (Document Object Model). For example, if attackers can trick you into inserting a <script> tag in the DOM, they can run arbitrary code on your website. The attack isn't limited to <script> tags—many elements and properties in the DOM allow code execution, for example, <img onerror="..."> and <a href="javascript:...">. If attacker-controlled data enters the DOM, expect security vulnerabilities.

Sanitization and security contexts

	Sanitization is the inspection of an untrusted value, turning it into a value that's safe to insert into the DOM. In many cases, sanitization doesn't change a value at all. Sanitization depends on context: a value that's harmless in CSS is potentially dangerous in a URL.

	Angular defines the following security contexts:

	HTML is used when interpreting a value as HTML, for example, when binding to innerHtml.
	Style is used when binding CSS into the style property.
	URL is used for URL properties, such as <a href>.
	Resource URL is a URL that will be loaded and executed as code, for example, in <script src>.
	Angular sanitizes untrusted values for HTML, styles, and URLs; sanitizing resource URLs isn't possible because they contain arbitrary code. In development mode, Angular prints a console warning when it has to change a value during sanitization.













	